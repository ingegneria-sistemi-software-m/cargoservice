/* Generated by AN DISI Unibo */ 
package it.unibo.hold_mock

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024

class Hold_mock ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		 
				var Counter = 0
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outblack("$name | STARTS")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="wait_request", cond=doswitch() )
				}	 
				state("wait_request") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t052",targetState="handle_request",cond=whenRequest("reserve_slot"))
				}	 
				state("handle_request") { //this:State
					action { //it:State
						delay(1000) 
						if(  Counter == 0  
						 ){answer("reserve_slot", "reserve_slot_success", "reserve_slot_success(slot1)"   )  
						}
						if(  Counter == 1  
						 ){answer("reserve_slot", "reserve_slot_success", "reserve_slot_success(slot2)"   )  
						}
						if(  Counter == 2  
						 ){answer("reserve_slot", "reserve_slot_success", "reserve_slot_success(slot3)"   )  
						}
						if(  Counter == 3  
						 ){answer("reserve_slot", "reserve_slot_success", "reserve_slot_success(slot4)"   )  
						}
						 
									Counter++ 
									
									if(Counter == 4)
										Counter = 0
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="wait_request", cond=doswitch() )
				}	 
			}
		}
} 
