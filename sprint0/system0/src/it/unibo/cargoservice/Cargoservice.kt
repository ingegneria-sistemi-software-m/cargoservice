/* Generated by AN DISI Unibo */ 
package it.unibo.cargoservice

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024

class Cargoservice ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		
				// stato e costanti
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outblue("$name STARTS")
						
									// inizializzo lo stato 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="wait_request", cond=doswitch() )
				}	 
				state("wait_request") { //this:State
					action { //it:State
						CommUtils.outblue("$name WAITING FOR REQUEST")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="serve_load_request",cond=whenRequest("load_product"))
				}	 
				state("serve_load_request") { //this:State
					action { //it:State
						CommUtils.outblue("$name SERVING REQUEST")
						if( checkMsgContent( Term.createTerm("load_product(PID)"), Term.createTerm("load_product(PID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
												val pid = payloadArg(0).toInt()
												CommUtils.outblue("requested PID: " + pid);
								if(  (0..2).random() == 0  
								 ){ val SlotId = 1  
								answer("load_product", "load_accepted", "load_accepted($SlotId)"   )  
								}
								else
								 {answer("load_product", "load_refused", "load_refused(rifiutato)"   )  
								 }
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="wait_request", cond=doswitch() )
				}	 
			}
		}
} 
