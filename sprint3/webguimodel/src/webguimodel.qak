System webgui

Request get_hold_state : get_hold_state(X)
Reply   hold_state     : hold_state(JSonString) for get_hold_state

Event hold_update      : hold_update(JSonString)

Context ctx_webgui       ip [host="localhost" port=8050]
Context ctx_cargoservice ip [host="127.0.0.1" port=8000]

ExternalQActor hold context ctx_cargoservice

QActor webgui context ctx_webgui {
    [#
        var currentState = "{}"

        fun stateUpdate(json: String){
            currentState = json
            println("UPDATE RECEIVED: $json") 
        }
    #]

    State init initial {
        delay 1000
        println("$name | START")
        println("$name | getting hold state for the first time")

        request hold -m get_hold_state : get_hold_state(si)
    }

    Transition t0
        whenReply hold_state -> handleHoldState

    State handleHoldState {
        [#
            val receivedState = payloadArg(0)
            println("$name | initial hold state: $receivedState") 
            stateUpdate(receivedState)

        #]
        
    }
    Goto listening

    State listening {
        println("$name | waiting for MQTT messages on topic 'holdGuiUpdate'")
    }

    Transition t1
        whenEvent hold_update -> update_webgui

   State update_webgui {
        [#
            val updateJson = payloadArg(0)
            println("$name | hold update received: $updateJson") 
            stateUpdate(updateJson)

        #]
    }
    Goto listening
}