System webgui 

Request get_hold_state	: get_hold_state(X)
Reply   hold_state		: hold_state(JSonString) for get_hold_state

Request reserve_slot         : reserve_slot(WEIGHT) 			    	   "richiesta verso hold per prenotare uno slot. Contiene il peso del prodotto da caricare"
Reply   reserve_slot_success : reserve_slot_success(SLOT) for reserve_slot "se la richiesta è soddisfacibile, hold restituisce il nome/id dello slot prenotato"
Reply   reserve_slot_fail    : reserve_slot_fail(CAUSA) for reserve_slot   "fallisce se il peso supera MaxLoad oppure se non è presente uno slot libero"


Event hold_update 		: hold_update(JSonString)



Context ctx_webgui ip [host="localhost" port=8050]
//Context ctx_cargoservice ip [host="127.0.0.1" port=8000]

//ExternalQActor hold context ctx_cargoservice



QActor webgui context ctx_webgui {
    [# 
        var currentState = "{}"
        
        fun stateUpdate(json: String){
            currentState = json
            println("UPDATE RECEIVED: $json") 
        }
    #]
    
    State init initial {
    	delay 1000 // aspetto un attimo per far partire gli altri attori
    	
        println("$name | start") color blue
        println("$name | getting hold state for the first time") color blue
        
        request hold_mock -m get_hold_state : get_hold_state(si)
    }
    Transition t0
        whenReply hold_state -> update_gui
        
        
	State update_gui {
        onMsg(hold_update : hold_update(JSonString)) {
            [# 
            	var Update = payloadArg(0)
            	println("$name | " + Update)
            	stateUpdate(Update)
            #]   
        }
    }
    Goto listening


    State listening {
        println("$name | Ready to receive hold updates") color blue
    }
    Transition t0
        whenEvent hold_update -> update_gui
}




/***** attori mock per testare *****/




QActor hold_mock context ctx_webgui{
	//Variabili di stato di Hold :
	//	- MaxLoad: Massimo peso caricabile sulla nave 
	//	- Currentload: Peso del carico in un dato istante 
	//	- slots: presenza o assenza di carico in un determinato slot (true = libero)
	[# 
		var MaxLoad = 500
		var currentLoad = 200
		val slots = linkedMapOf(
			"slot1" to true, 
			"slot2" to false,
			"slot3" to false,
			"slot4" to true
		)

	
		fun getHoldStateJson(): String {
		    val slotsJson = slots.map{ (key, value) ->
		        "\"$key\": \"${if (value) "free" else "occupied"}\""
		    }.joinToString(", ")
		
		    val rawJson = """{"currentLoad":$currentLoad,"slots":{$slotsJson}}"""		
		    return "'${rawJson.replace("'", "\\'")}'"
	    }
	#]
	
	
	State s0 initial {
		println("$name | STARTS - MaxLoad: $MaxLoad kg, Slots: $slots") color yellow
    
	}
	Goto wait_request
	
	  
	State wait_request{
		println("$name | waiting for reservation requests") color yellow
		
	}
	Transition t0
		whenRequest reserve_slot -> check_reservation
	   	whenRequest get_hold_state -> serving_get_hold_state
	  
	  
	/*Verifico la presenza di slot liberi all'interno della stiva e che il MaxLoad della nave non venga superato */
	State check_reservation{
		println("$name | checking reservation request") color yellow
		
		onMsg(reserve_slot : reserve_slot(WEIGHT)){
			[#
				val weight = payloadArg(0).toInt()
				var FreeSlot: String ?= null
				var Cause = "" 

				if (currentLoad + weight > MaxLoad){
					Cause = "'Exceeds MaxLoad'"
				} else{
					// .find{it.value} è un iteratore Kotlin che restituisce la prima entry
					// nella struttura dati tale per cui l'espressione tra graffe risulti 'true'
					//
					// it è la entry corrente all'interno della struttura dati,
					// nel nostro caso ha un campo value in quanto è l'entry di una mappa
					FreeSlot = slots.entries.find{it.value}?.key
					if (FreeSlot == null){
						Cause = "'All slots are occupied''"
					}
				}
			#]
 
			if [# FreeSlot != null #]{
				println("$name | reserving $FreeSlot for weight $weight") color green
				[# 
					slots[FreeSlot] = false
					currentLoad += weight
					val JsonState = getHoldStateJson()
            		
				#]
				emit hold_update : hold_update($JsonState)
				replyTo reserve_slot with reserve_slot_success : reserve_slot_success($FreeSlot)
			}else{
				println("$name | reservation refused: $Cause") color red
				replyTo reserve_slot with reserve_slot_fail : reserve_slot_fail($Cause)
			}
		}
	}
	Goto wait_request
 

	State serving_get_hold_state {
		onMsg(get_hold_state : get_hold_state(X)){
			[#
				val JsonState = getHoldStateJson()
			#]
			println("$name | sending hold state") color yellow
			println("$name | DEBUG wrapped = $JsonState") color yellow
			replyTo get_hold_state with hold_state : hold_state($JsonState)
		}
	}
	Goto wait_request
}





QActor hold_updater context ctx_webgui {
	State s0 initial {
		delay 5000
		request hold_mock -m reserve_slot : reserve_slot(200)
		delay 5000
		request hold_mock -m reserve_slot : reserve_slot(300)
	}
}