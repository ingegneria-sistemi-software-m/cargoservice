/* Generated by AN DISI Unibo */ 
package it.unibo.hold

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024

class Hold ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		 
				var MaxLoad = 500
				var currentLoad = 0
				val slots = linkedMapOf(
					"slot1" to true, 
					"slot2" to true,
					"slot3" to true,
					"slot4" to true
				)
		
			
				fun getHoldStateJson(): String {
				    val slotsJson = slots.map{ (key, value) ->
				        "\"$key\": \"${if (value) "free" else "occupied"}\""
				    }.joinToString(", ")
				
				    val rawJson = """{"currentLoad":$currentLoad,"slots":{$slotsJson}}"""
				
				 	 println("DEBUG raw JSON: $rawJson")
				
				    return "'${rawJson.replace("'", "\\'")}'"
			    }
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outyellow("$name | STARTS - MaxLoad: $MaxLoad kg, Slots: $slots")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="wait_request", cond=doswitch() )
				}	 
				state("wait_request") { //this:State
					action { //it:State
						CommUtils.outyellow("$name | waiting for reservation requests")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t052",targetState="serving_get_hold_state",cond=whenRequest("get_hold_state"))
					transition(edgeName="t053",targetState="check_reservation",cond=whenRequest("reserve_slot"))
				}	 
				state("check_reservation") { //this:State
					action { //it:State
						CommUtils.outyellow("$name | checking reservation request")
						if( checkMsgContent( Term.createTerm("reserve_slot(WEIGHT)"), Term.createTerm("reserve_slot(WEIGHT)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												val weight = payloadArg(0).toInt()
												var FreeSlot: String ?= null
												var Cause = "" 
								
												if (currentLoad + weight > MaxLoad){
													Cause = "'Exceeds MaxLoad'"
												} else{
													// .find{it.value} è un iteratore Kotlin che restituisce la prima entry
													// nella struttura dati tale per cui l'espressione tra graffe risulti 'true'
													//
													// it è la entry corrente all'interno della struttura dati,
													// nel nostro caso ha un campo value in quanto è l'entry di una mappa
													FreeSlot = slots.entries.find{it.value}?.key
													if (FreeSlot == null){
														Cause = "'All slots are occupied''"
													}
												}
								if(  FreeSlot != null  
								 ){CommUtils.outgreen("$name | reserving $FreeSlot for weight $weight")
								 
													slots[FreeSlot] = false
													currentLoad += weight
													val JsonState = getHoldStateJson()
								            		
								emit("hold_update", "hold_update($JsonState)" ) 
								updateResourceRep( JsonState  
								)
								answer("reserve_slot", "reserve_slot_success", "reserve_slot_success($FreeSlot)"   )  
								}
								else
								 {CommUtils.outred("$name | reservation refused: $Cause")
								 answer("reserve_slot", "reserve_slot_fail", "reserve_slot_fail($Cause)"   )  
								 }
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="wait_request", cond=doswitch() )
				}	 
				state("serving_get_hold_state") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("get_hold_state(X)"), Term.createTerm("get_hold_state(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												val JsonState = getHoldStateJson()
								CommUtils.outyellow("$name | sending hold state")
								CommUtils.outred("$name | DEBUG wrapped = $JsonState")
								answer("get_hold_state", "hold_state", "hold_state($JsonState)"   )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="wait_request", cond=doswitch() )
				}	 
			}
		}
} 
