/* Generated by AN DISI Unibo */ 
package it.unibo.sonarlistener

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024
import main.java.IntervalliMisurazioni

class Sonarlistener ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		 
				val DFREE = 30
				var CurrentIntervallo = IntervalliMisurazioni.PRIMA_MISURAZIONE
				var LastIntervallo = IntervalliMisurazioni.PRIMA_MISURAZIONE
				// conta quanti misurazioni di fila sono cadute nello stesso intervallo
				var CounterIntervallo = 1
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outblack("$name | start")
						subscribeToLocalActor("sonarsimul") 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="listen_for_measurement", cond=doswitch() )
				}	 
				state("listen_for_measurement") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="process_measurement",cond=whenEvent("measurement"))
				}	 
				state("process_measurement") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("measurement(CM)"), Term.createTerm("measurement(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
												val M = payloadArg(0).toInt()	
												CounterIntervallo++
								CommUtils.outyellow("$name | misurato $M cm")
								if(   M < DFREE/2  
								 ){CommUtils.outblue("$name | container presente")
								 CurrentIntervallo = IntervalliMisurazioni.CONTAINER_PRESENTE  
								}
								if(  M >= DFREE/2 && M <= DFREE  
								 ){CommUtils.outblue("$name | container assente")
								 CurrentIntervallo = IntervalliMisurazioni.CONTAINER_ASSENTE  
								}
								if(  M > DFREE  
								 ){CommUtils.outblue("$name | guasto!!!")
								 CurrentIntervallo = IntervalliMisurazioni.GUASTO  
								}
								
												if(CurrentIntervallo==LastIntervallo && LastIntervallo!=IntervalliMisurazioni.PRIMA_MISURAZIONE ) {
													CommUtils.outmagenta("consistenza: $CounterIntervallo")
													
													// switch di Kotlin
													when(CurrentIntervallo) {
													    IntervalliMisurazioni.CONTAINER_PRESENTE -> {
													        if(CounterIntervallo == 3) {
													        	CommUtils.outblue("Container presente consistente")
													    		CounterIntervallo = 0
													    	}
													    }
													    IntervalliMisurazioni.CONTAINER_ASSENTE -> {
													    	if(CounterIntervallo == 3) {
													        	CommUtils.outblue("Container assente consistente")
													    		CounterIntervallo = 0
													    	}
													    }
													    IntervalliMisurazioni.GUASTO -> {
													    	if(CounterIntervallo == 3) {
																CommUtils.outblue("Guasto consistente")		
																CounterIntervallo = 0			    		
													    	}
													    }
													    else -> {
													    	// ci vuole se no kotlin si lamenta
													    }
													}
												} 
												else {
													// 1 in quanto questa è la prima misurazione appartenente al suo intervallo
													CounterIntervallo = 1
													CommUtils.outblue("consistenza: $CounterIntervallo")
												}
												
												LastIntervallo = CurrentIntervallo
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="listen_for_measurement", cond=doswitch() )
				}	 
			}
		}
} 
