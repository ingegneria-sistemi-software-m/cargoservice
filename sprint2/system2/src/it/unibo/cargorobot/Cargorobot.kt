/* Generated by AN DISI Unibo */ 
package it.unibo.cargorobot

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024
import main.java.*

class Cargorobot ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		
				// stato
				val file = "./cargorobot_conf.json"
				val config = CargoRobotConfigLoader.loadFromFile(file);
				
				val Step_len = config.getStepLen()
				
		//		val positions = hashMapOf(
		//			"home"    	to arrayOf(0, 0),
		//			"io_port" 	to arrayOf(0, 4),
		//		    "slot1"   	to arrayOf(1, 1),
		//		    "slot2" 	to arrayOf(1, 3),
		//		    "slot3" 	to arrayOf(4, 1),
		//		    "slot4" 	to arrayOf(4, 3)
		//		)
		//		
		//		val directions = hashMapOf(
		//			"home"    	to "down",
		//			"io_port" 	to "down",
		//		    "slot1"   	to "right",
		//		    "slot2" 	to "right",
		//		    "slot3" 	to "left",
		//		    "slot4" 	to "left"
		//		)
		
				lateinit var Destination : String
				lateinit var Reserved_slot : String
				
				var moving 	= false
				
				var container_present = false
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outmagenta("$name | STARTS")
						CommUtils.outyellow("$name | $MyName engaging ... ")
						request("engage", "engage($MyName,$Step_len)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t05",targetState="wait_request",cond=whenReply("engagedone"))
					transition(edgeName="t06",targetState="end",cond=whenReply("engagerefused"))
				}	 
				state("wait_request") { //this:State
					action { //it:State
						CommUtils.outmagenta("$name | waiting for request")
						 moving = false  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 interrupthandle(edgeName="t07",targetState="wait_resume_msg",cond=whenEvent("interrompi_tutto"),interruptedStateTransitions)
					interrupthandle(edgeName="t08",targetState="container_arrived_handler",cond=whenEvent("container_arrived"),interruptedStateTransitions)
					interrupthandle(edgeName="t09",targetState="container_absent_handler",cond=whenEvent("container_absent"),interruptedStateTransitions)
					transition(edgeName="t010",targetState="go_to_io_port",cond=whenRequest("handle_load_operation"))
				}	 
				state("go_to_io_port") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("handle_load_operation(SLOT)"), Term.createTerm("handle_load_operation(SLOT)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
												Reserved_slot = payloadArg(0)
																
												// il doppio !! serve a dire al compilatore Kotlin di stare tranquillo 
												// e di recuperare il valore dalla mappa anche senza fare dei null-check
												val coords = config.getPositions()[Reserved_slot]!!
												val X = coords[0]
												val Y = coords[1]
								CommUtils.outmagenta("$name | cargorobot reserved_slot is $Reserved_slot = ($X, $Y)")
						}
						CommUtils.outmagenta("$name | going to io-port")
						
									// aggiorno la mia destinazione per ricordarmi dove devo andare in caso di interruzioni
									Destination = "io_port"
									
									val coords = config.getPositions()[Destination]!!
									val X = coords[0]
									val Y = coords[1]
						request("moverobot", "moverobot($X,$Y)" ,"basicrobot" )  
						 moving = true  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 interrupthandle(edgeName="t011",targetState="wait_resume_msg",cond=whenEvent("interrompi_tutto"),interruptedStateTransitions)
					interrupthandle(edgeName="t012",targetState="container_arrived_handler",cond=whenEvent("container_arrived"),interruptedStateTransitions)
					interrupthandle(edgeName="t013",targetState="container_absent_handler",cond=whenEvent("container_absent"),interruptedStateTransitions)
					transition(edgeName="t014",targetState="arrived_at_io_port",cond=whenReply("moverobotdone"))
				}	 
				state("arrived_at_io_port") { //this:State
					action { //it:State
						CommUtils.outmagenta("$name | arrived at io-port")
						 
									moving = false
									
									val Direction = config.getDirections()[Destination]!!
						forward("setdirection", "dir($Direction)" ,"basicrobot" ) 
						if(  container_present  
						 ){ container_present = false  
						forward("continue", "continue(si)" ,name ) 
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 interrupthandle(edgeName="t015",targetState="wait_resume_msg",cond=whenEvent("interrompi_tutto"),interruptedStateTransitions)
					transition(edgeName="t016",targetState="pick_up_container",cond=whenDispatch("continue"))
					transition(edgeName="t017",targetState="pick_up_container",cond=whenEvent("container_arrived"))
				}	 
				state("pick_up_container") { //this:State
					action { //it:State
						CommUtils.outmagenta("$name | picking up container")
						 moving = false  
						delay(3000) 
						forward("continue", "continue(si)" ,name ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 interrupthandle(edgeName="t018",targetState="wait_resume_msg",cond=whenEvent("interrompi_tutto"),interruptedStateTransitions)
					interrupthandle(edgeName="t019",targetState="container_arrived_handler",cond=whenEvent("container_arrived"),interruptedStateTransitions)
					interrupthandle(edgeName="t020",targetState="container_absent_handler",cond=whenEvent("container_absent"),interruptedStateTransitions)
					transition(edgeName="t021",targetState="go_to_reserved_slot",cond=whenDispatch("continue"))
				}	 
				state("go_to_reserved_slot") { //this:State
					action { //it:State
						
									// aggiorno la mia destinazione per ricordarmi dove devo andare in caso di interruzioni
									Destination = Reserved_slot
									
									val coords = config.getPositions()[Destination]!!
									val X = coords[0]
									val Y = coords[1]
						CommUtils.outmagenta("$name | going to my reserved slot: $Reserved_slot = ($X, $Y)")
						request("moverobot", "moverobot($X,$Y)" ,"basicrobot" )  
						 moving = true  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 interrupthandle(edgeName="t022",targetState="wait_resume_msg",cond=whenEvent("interrompi_tutto"),interruptedStateTransitions)
					interrupthandle(edgeName="t023",targetState="container_arrived_handler",cond=whenEvent("container_arrived"),interruptedStateTransitions)
					interrupthandle(edgeName="t024",targetState="container_absent_handler",cond=whenEvent("container_absent"),interruptedStateTransitions)
					transition(edgeName="t025",targetState="arrived_at_reserved_slot",cond=whenReply("moverobotdone"))
				}	 
				state("arrived_at_reserved_slot") { //this:State
					action { //it:State
						CommUtils.outmagenta("$name | arrived at reserved slot")
						 
									moving = false
									
									val Direction = config.getDirections()[Destination]!!
						forward("setdirection", "dir($Direction)" ,"basicrobot" ) 
						CommUtils.outmagenta("$name | laying down the container")
						delay(3000) 
						forward("continue", "continue(si)" ,name ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 interrupthandle(edgeName="t026",targetState="wait_resume_msg",cond=whenEvent("interrompi_tutto"),interruptedStateTransitions)
					interrupthandle(edgeName="t027",targetState="container_arrived_handler",cond=whenEvent("container_arrived"),interruptedStateTransitions)
					interrupthandle(edgeName="t028",targetState="container_absent_handler",cond=whenEvent("container_absent"),interruptedStateTransitions)
					transition(edgeName="t029",targetState="back_to_home",cond=whenDispatch("continue"))
				}	 
				state("back_to_home") { //this:State
					action { //it:State
						CommUtils.outmagenta("$name | load operation completed")
						answer("handle_load_operation", "load_operation_complete", "load_operation_complete(ok)"   )  
						CommUtils.outmagenta("$name | Back to home")
						
									// aggiorno la mia destinazione per ricordarmi dove devo andare in caso di interruzioni
									Destination = "home"
									
									val coords = config.getPositions()[Destination]!!
									val X = coords[0]
									val Y = coords[1]
						request("moverobot", "moverobot($X,$Y)" ,"basicrobot" )  
						 moving = true  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 interrupthandle(edgeName="t030",targetState="wait_resume_msg",cond=whenEvent("interrompi_tutto"),interruptedStateTransitions)
					interrupthandle(edgeName="t031",targetState="container_arrived_handler",cond=whenEvent("container_arrived"),interruptedStateTransitions)
					interrupthandle(edgeName="t032",targetState="container_absent_handler",cond=whenEvent("container_absent"),interruptedStateTransitions)
					transition(edgeName="t033",targetState="at_home",cond=whenReply("moverobotdone"))
					transition(edgeName="t034",targetState="stop_going_to_home",cond=whenRequest("handle_load_operation"))
				}	 
				state("stop_going_to_home") { //this:State
					action { //it:State
						CommUtils.outmagenta("$name | stop going to home and start serving new request immediately")
						emit("alarm", "alarm(blocca)" ) 
						 moving = false  
						if( checkMsgContent( Term.createTerm("handle_load_operation(SLOT)"), Term.createTerm("handle_load_operation(SLOT)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
												Reserved_slot = payloadArg(0)
																
												// il doppio !! serve a dire al compilatore Kotlin di stare tranquillo 
												// e di recuperare il valore dalla mappa anche senza fare dei null-check
												val coords = config.getPositions()[Reserved_slot]!!
												val X = coords[0]
												val Y = coords[1]
								CommUtils.outmagenta("$name | cargorobot reserved_slot is $Reserved_slot = ($X, $Y)")
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 interrupthandle(edgeName="t035",targetState="wait_resume_msg",cond=whenEvent("interrompi_tutto"),interruptedStateTransitions)
					interrupthandle(edgeName="t036",targetState="container_arrived_handler",cond=whenEvent("container_arrived"),interruptedStateTransitions)
					interrupthandle(edgeName="t037",targetState="container_absent_handler",cond=whenEvent("container_absent"),interruptedStateTransitions)
					transition(edgeName="t038",targetState="stopped_for_next_request",cond=whenReply("moverobotdone"))
					transition(edgeName="t039",targetState="stopped_for_next_request",cond=whenReply("moverobotfailed"))
				}	 
				state("stopped_for_next_request") { //this:State
					action { //it:State
						CommUtils.outmagenta("$name | going to io-port")
						
									// aggiorno la mia destinazione per ricordarmi dove devo andare in caso di interruzioni
									Destination = "io_port"
									
									val coords = config.getPositions()[Destination]!!
									val X = coords[0]
									val Y = coords[1]
						request("moverobot", "moverobot($X,$Y)" ,"basicrobot" )  
						 moving = true  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 interrupthandle(edgeName="t040",targetState="wait_resume_msg",cond=whenEvent("interrompi_tutto"),interruptedStateTransitions)
					interrupthandle(edgeName="t041",targetState="container_arrived_handler",cond=whenEvent("container_arrived"),interruptedStateTransitions)
					interrupthandle(edgeName="t042",targetState="container_absent_handler",cond=whenEvent("container_absent"),interruptedStateTransitions)
					transition(edgeName="t043",targetState="arrived_at_io_port",cond=whenReply("moverobotdone"))
				}	 
				state("at_home") { //this:State
					action { //it:State
						CommUtils.outmagenta("$name | at home")
						forward("setdirection", "dir(down)" ,"basicrobot" ) 
						 
						   			moving = false
						   			
						   			val Direction = config.getDirections()[Destination]!!
						forward("setdirection", "dir($Direction)" ,"basicrobot" ) 
						forward("continue", "continue(si)" ,name ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 interrupthandle(edgeName="t044",targetState="wait_resume_msg",cond=whenEvent("interrompi_tutto"),interruptedStateTransitions)
					interrupthandle(edgeName="t045",targetState="container_arrived_handler",cond=whenEvent("container_arrived"),interruptedStateTransitions)
					interrupthandle(edgeName="t046",targetState="container_absent_handler",cond=whenEvent("container_absent"),interruptedStateTransitions)
					transition(edgeName="t047",targetState="wait_request",cond=whenDispatch("continue"))
				}	 
				state("wait_resume_msg") { //this:State
					action { //it:State
						CommUtils.outred("$name | sonar malfunzionante, mi fermo")
						emit("alarm", "alarm(blocca)" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t048",targetState="resume",cond=whenEvent("riprendi_tutto"))
					transition(edgeName="t049",targetState="stopped_for_sonar_fault",cond=whenReply("moverobotdone"))
					transition(edgeName="t050",targetState="stopped_for_sonar_fault",cond=whenReply("moverobotfailed"))
				}	 
				state("stopped_for_sonar_fault") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t051",targetState="resume",cond=whenEvent("riprendi_tutto"))
				}	 
				state("resume") { //this:State
					action { //it:State
						CommUtils.outgreen("$name | riprendo")
						if(  moving  
						 ){
										val coords = config.getPositions()[Destination]!!
										val X = coords[0]
										val Y = coords[1]
						request("moverobot", "moverobot($X,$Y)" ,"basicrobot" )  
						}
						returnFromInterrupt(interruptedStateTransitions)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
				state("container_arrived_handler") { //this:State
					action { //it:State
						CommUtils.outyellow("$name | container arrivato")
						 container_present = true  
						returnFromInterrupt(interruptedStateTransitions)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
				state("container_absent_handler") { //this:State
					action { //it:State
						CommUtils.outyellow("$name | container assente")
						 container_present = false  
						returnFromInterrupt(interruptedStateTransitions)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
				state("end") { //this:State
					action { //it:State
						CommUtils.outred("$name | ENDS ")
						 System.exit(0)  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
} 
